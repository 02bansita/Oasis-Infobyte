#ONLINE EXAMINATION

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.lang.Exception;
import java.util.Timer;
import java.util.TimerTask;

class login extends JFrame implements ActionListener {
    JButton b1;
    JPanel newPanel;
    JLabel userLabel, passLabel;
    final JTextField textField1, textField2;

    login() {
        userLabel = new JLabel();
        userLabel.setText("Username :");
        textField1 = new JTextField(15);
        passLabel = new JLabel();
        passLabel.setText("Password :");
        textField2 = new JPasswordField(8);
        b1 = new JButton("   SUBMIT   ");
        newPanel = new JPanel(new GridLayout(3, 1));
        newPanel.add(userLabel);
        newPanel.add(textField1);
        newPanel.add(passLabel);
        newPanel.add(textField2);
        newPanel.add(b1);
        add(newPanel, BorderLayout.CENTER);
        b1.addActionListener(this);
        setTitle("Login Form ");
    }

    public void actionPerformed(ActionEvent ae) {
        String userValue = textField1.getText();
        String passValue = textField2.getText();
        if (!passValue.equals(""))
            new OnlineTestBegin(userValue);
        else {
            textField2.setText("Enter Password");
            actionPerformed(ae);
        }
    }
}

class OnlineTestBegin extends JFrame implements ActionListener {
    JLabel l;
    JLabel l1;
    JRadioButton jb[] = new JRadioButton[6];
    JButton b1, b2, log;
    ButtonGroup bg;
    int count = 0, current = 0, x = 1, y = 1, now = 0;
    int m[] = new int[10];
    Timer timer = new Timer();

    OnlineTestBegin(String s) {
        super(s);
        l = new JLabel();
        l1 = new JLabel();
        add(l);
        add(l1);
        bg = new ButtonGroup();
        for (int i = 0; i < 5; i++) {
            jb[i] = new JRadioButton();
            add(jb[i]);
            bg.add(jb[i]);
        }
        b1 = new JButton("Save and Next");
        b2 = new JButton("Save for later");
        b1.addActionListener(this);
        b2.addActionListener(this);
        add(b1);
        add(b2);
        set();
        l.setBounds(30, 40, 450, 20);
        l1.setBounds(20, 20, 450, 20);
        jb[0].setBounds(50, 80, 100, 20);
        jb[1].setBounds(50, 110, 100, 20);
        jb[2].setBounds(50, 140, 100, 20);
        jb[3].setBounds(50, 170, 100, 20);
        b1.setBounds(95, 240, 140, 30);
        b2.setBounds(270, 240, 150, 30);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(null);
        setLocation(250, 100);
        setVisible(true);
        setSize(600, 350);
        timer.scheduleAtFixedRate(new TimerTask() {
            int i = 600;

            public void run() {
                l1.setText("Time left: " + i);
                i--;
                if (i < 0) {
                    timer.cancel();
                    l1.setText("Time Out");
                }
            }
        }, 0, 1000);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == b1) {
            if (check())
                count = count + 1;
            current++;
            set();
            if (current == 9) {
                b1.setEnabled(false);
                b2.setText("Result");
            }
        }
        if (e.getActionCommand().equals("Save for later")) {
            JButton bk = new JButton("Review" + x);
            bk.setBounds(480, 20 + 30 * x, 100, 30);
            add(bk);
            bk.addActionListener(this);
            m[x] = current;
            x++;
            current++;
            set();
            if (current == 9)
                b2.setText("Result");
            setVisible(false);
            setVisible(true);
        }
        for (int i = 0, y = 1; i < x; i++, y++) {
            if (e.getActionCommand().equals("Review" + y)) {
                if (check())
                    count = count + 1;
                now = current;
                current = m[y];
                set();
                ((JButton) e.getSource()).setEnabled(false);
                current = now;
            }
        }
        if (e.getActionCommand().equals("Result")) {
            if (check())
                count = count + 1;
            current++;
            JOptionPane.showMessageDialog(this, "Score =" + count);
            System.exit(0);
        }
    }

    void set() {
        jb[4].setSelected(true);
        if (current == 0) {
            l.setText(
                    "Que1: A switched mode power supply operating at 20 kHz to 100 kHz range uses as the main switching element.");
            jb[0].setText("Thyristor");
            jb[1].setText("MOSFET");
            jb[2].setText("Triac");
            jb[3].setText("UJT");
        }
        if (current == 1) {
            l.setText("Que2: Which semiconductor power device out of the following is not a current triggered device?");
            jb[0].setText("Thyristor");
            jb[1].setText("GTO");
            jb[2].setText("Triac");
            jb[3].setText("MOSFET");
        }
        if (current == 2) {
            l.setText("Que3: The Triac can be used in ");
            jb[0].setText("Inverter");
            jb[1].setText("Rectifier");
            jb[2].setText("Multiquadrant chopper");
            jb[3].setText("Cycloconverter");
        }
        if (current == 3) {
            l.setText("Que4: Which of the following does not cause permanent damage of an SCR?");
            jb[0].setText("High current");
            jb[1].setText("High rate of rise of current");
            jb[2].setText("High temperature rise");
            jb[3].setText("High rate of rise of voltages");
        }
        if (current == 4) {
            l.setText("Que5: If a diode is connected in anti-parallel with a thyristor, then?");
            jb[0].setText("Both turn off power loss and turn off time decreases");
            jb[1].setText("Turn off power loss decreases but turn off time increases");
            jb[2].setText("Turn off power loss increases but turn off time decreases");
            jb[3].setText("None of the above");
        }
        if (current == 5) {
            l.setText("Que6: The uncontrolled electronic switch employed in power electronic converters is ");
            jb[0].setText("Thyristor");
            jb[1].setText("BJT");
            jb[2].setText("Diode");
            jb[3].setText("MOSFET");
        }
        if (current == 6) {
            l.setText("Que7: The MOSFET switch in its on-state may be considered equivalent to ");
            jb[0].setText("Resistor");
            jb[1].setText("Inductor");
            jb[2].setText("Capacitor ");
            jb[3].setText("Battery");
        }
        if (current == 7) {
            l.setText(
                    "Que8: In a commutation circuit employed to turn off an SCR, Satisfactory turn off is obtained when");
            jb[0].setText("Circuit turn off time < device turn off time");
            jb[1].setText("Circuit turn off time > device turn off time");
            jb[2].setText("Circuit time constant > device turn off time");
            jb[3].setText("Circuit time constant < device turn off time");
        }
        if (current == 8) {
            l.setText(
                    "For the power semiconductor devices IGBT, MOSFET, Diode and Thyristor, which one of the following statements is TRUE??");
            jb[0].setText("All of the four are majority carrier devices");
            jb[1].setText("All the four are minority carrier devices");
            jb[2].setText(
                    "IGBT and MOSFET are majority carrier devices, whereas Diode and Thyristor are minority carrier devices");
            jb[3].setText(
                    "MOSFET is majority carrier device, whereas IGBT, Diode, Thyristor are minority carrier devices");
        }
        if (current == 9) {
            l.setText("Que10: The typical ratio of latching current to holding current in a 20 A thyristor is");
            jb[0].setText("5.0");
            jb[1].setText("2.0");
            jb[2].setText("1.0");
            jb[3].setText("0.5");
        }
        l.setBounds(30, 40, 450, 20);
        for (int i = 0, j = 0; i <= 90; i += 30, j++)
            jb[j].setBounds(50, 80 + i, 200, 20);
    }

    boolean check() {
        if (current == 0)
            return (jb[1].isSelected());
        if (current == 1)
            return (jb[3].isSelected());
        if (current == 2)
            return (jb[3].isSelected());
        if (current == 3)
            return (jb[3].isSelected());
        if (current == 4)
            return (jb[2].isSelected());
        if (current == 5)
            return (jb[2].isSelected());
        if (current == 6)
            return (jb[0].isSelected());
        if (current == 7)
            return (jb[1].isSelected());
        if (current == 8)
            return (jb[3].isSelected());
        if (current == 9)
            return (jb[1].isSelected());
        return false;
    }
}

class OnlineExam {
    public static void main(String args[]) {
        try {
            login form = new login();
            form.setSize(400, 150);
            form.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }
}
